#+TITLE: OCaml MOOC
#+AUTHOR: Andrew Jarrett

Notes and problems as I work through [[https://www.fun-mooc.fr/courses/course-v1:parisdiderot%2B56002%2Bsession03/about][Université Paris Diderot's course on Functional Programming in OCaml]].


* Week 0

** W0 S1

*** Notes

**** /Computing/ and /programming/

Computing: 
#+BEGIN_QUOTE
the study of algorithmic processes that describe and transform information. The fundamental question is /What can be (efficiently) automated?/
- 1989 ACM report on Computing as a Discipline
#+END_QUOTE

Basic components of computing:
- a *program* that describes the intended transformation of information
- a *machine* that executes the program

*Many* machines, and *many ways* of writing a program.
Some were invented well before the first modern computer.

/Let's recall a bit of their history/

**** Hilbert

[[https://en.wikipedia.org/wiki/Entscheidungsproblem][Hilbert's decision problem]] (Entscheidungsproblem)

If one had to pick a date, 1928 would be an interesting date. That year, Hilbert asked:

#+BEGIN_QUOTE
Can we devise a *process* to determine in *a finite number* of *operations* whether a first-order logic statement is valid?
#+END_QUOTE

The answer to this question is "no", but to find it, one needs to make precise what is
- an operation and
- a process of computation

**** Turing

Alan Turing answers Hilbert question in 1936, inventing the now world-known Turing machine automaton.

Theoretical foundation of modern computers and imperative programming
- tape ≈ addressable read-write memory with stored program
- automaton ≈ microprocessor

**** Turing Machines & Imperative Programming

In an imperative program we /read, write, perform operations and take decisions/ based on the contents of /memory cells/ that hold the contents of variables like =c=, =n=, =res= in the following Java simple example.

#+BEGIN_SRC java
  public class Factorial
  {
      public static int compute(int n)
      {
          int res = 1;
          for (int c = 1; c <= n; c++)
              res = res * c;
          return res
      }
  }
#+END_SRC

**** Church

Alonzo Church (Alan Turing's PhD advisor)

Also answers Hilbert's question in 1936 with /a completely diferent approach/, inventing the λ-calculus.
- =λx.M= = nameless function with formal parameter =x= and body =M= (abstraction)
- =MN= = call function =M= with actual parameter =N= (application)
  
This became the theoretical foundation of functional programming.

=(λx.M)N -> β M[x := N]=

The =β= reduction rule is *the one and only computational device in the system!

**** The λ-calculus and Functional programming
In a /functional program/ we /define/ (possibly recursive) functions, and /compose/ and /apply/ them /to compute/ the expected /results/.

Like in the following example:

#+BEGIN_SRC ocaml
  let rec fact =
    function n -> if n=0 then 1 else n*(fact (n-1))
#+END_SRC

In a truly functional programming language, functions are /first class citizens/. They can be:
- named
- evaluated
- passed as arguments
- returned as results
- used everywhere an expression can fit

(Ab)using Church's original notation one woulc write the second line:

=λ n.if n=0 then 1 else n*(fact(n-1))=

Hence the excitement about /lambdas/ being introduced in Java and C++ in recent years.

**** The Church-Turing thesis

People began to wonder if these 2 methods were really that different. Turing himself came up with a proof of their equivalence in 1937:

#+BEGIN_QUOTE
A function is *computable* by a Turing machine, *if and only if* it is *computable* using lambda calculus.
#+END_QUOTE

Church-Turing thesis:

#+BEGIN_QUOTE
A function that is *computable* by *any computing device* is also *computable* by a Turing machine.
#+END_QUOTE

In simpler terms:

#+BEGIN_QUOTE
All general purpose programming languages are *computationally equivalent*.
#+END_QUOTE

**** But programming languages are not born equal

They have different expressiveness.

The quest for more expressive constructs is never ending. leading to
- different data representations
- different execution models
- diferent mechanisms of abstraction

And there are many other desirable features
- safety of execution
- efficiency
- maintainability
  
Depending on the problems at hand, some programming languages may be significantly better than others.

**** An early assessment from FORTRAN's very creator

#+BEGIN_QUOTE
Functional programs deal with structured data, ... do not name their arguments, and do not require the complex machinery of procedure declarations...

/Can programming be liberated from the von Neumann style?/
- John Backus, Turing lecture 1978
#+END_QUOTE

[[https://www.thocp.net/biographies/papers/backus_turingaward_lecture.pdf][{PDF} Can Programming be liberated from the von Neumann style?]]

**** Why functional programming is on the rise

Quoting the report on Introductory Computer Science Education at CMU, [[http://www.cs.cmu.edu/~bryant/pubdir/cmu-cs-10-140.pdf]] there are some clear emerging trends

Need for greater software reliability
(Pure) functional programs are easier to prove correct than imperative ones

Harnessing the power of parallel computation

A carefully chosen set of higher order functions allows us to write programs that are easily parallelisable.

A very well known example: *MapReduce*

We will learn about functional programming using the /OCaml/ language.


* Week 1

** W1 S0 :: Basic Data Types

*** Type Inference

- Types of identifiers are inferred, not declared
- Polymorphic types provide additional flexibility

*** A Rich Type System

- Structured types: see Weeks 2 and 3
- Functional types: see Week 4
- Reference types: see Week 5 (imperative features)
- Objects and classes will not be covered

*** Integers

- Type: =int=
- Values: =-2^62 ... 2^62-1= on 64-bit architectures
- Integer division always returns an integer
- =mod= is an infix operator

*** Boolean Pitfalls

- Negation is =not=; ! is wrong
- Conjunction is =&&=; =&= is wrong
- Conjunction is =&&=; =and= has a different meaning
- /You can only compare values of the same type/

*** Playground

#+BEGIN_SRC ocaml
  true && true;;
  (* : bool = true *)

  false || true;;
  (* : bool = true *)

  true && not (false || true);;
  (* : bool = false *)

  1 < 7;;
  (* : bool = true *)

  5.0 > "hello";;
  (* This expression has type string but an expression was found of type float *)

  (7.56 <= 8e32) && (6 > -3);;
  (* : bool = true *)
#+END_SRC

** W1 S1 :: More Data Types

*** Floating-point arithmetic

- Type: =float=
- Values: Must be written with a decimal point (5.2), or exponential (5e6, 6e-9(, or both.
- Operations: =+. -. *. /.=
- Functions: =sqrt=, =sin=, =cos=, =ceil=, =floor=

*** Floating-point Pitfalls

- Floating-point constants must indicate that they are not integers: use decimal dot or exponent
- Floating-point operations must be written with a dot

*** Conversions between types

- Basic types are *disjoint*, meaning no value belongs to two different basic types
- No implicit conversion between types
- Explicit conversion operations
- Background: implicit conversion would not go well with type inference

To convert a type, you need to call a type-conversion operator.

*** Conversion :: Floating-point <-> Integer

- Conversion functions in both directions:
  =float_of_int= : int -> float
  =int_of_float= : float -> int

- Function application:
  Write the name of the function, followed by the argument

- Parentheses only when necessary to indicate structure /(??)/

*** Characters

- Type: =char=
- Values: 256 characters, numbered from 0 to 255
- can be written like 'a', '\087', etc (see the manual)
- Conversion functions:
  =Char.chr=  : int -> char
  =Char.code= : char -> int

*** Strings

- Type: =string=
- Values: Character strings
- Operator =^= for concatenation
- Many functions:
  =String.length=   : string -> int
  =int_of_string=   : string -> int
  =float_of_string= : string -> float

*** Character & String Pitfalls

- Strings, Characters, Integers, Booleans, Floats are all /disjoint/
- You must use explicit converstion functions
- Positions in strings are numbered from 0 to its length minus 1
- Strings are immutable
  

*** Playground

#+BEGIN_SRC ocaml
  "acb" ^ "def";;
  (* : string = "abcdef" *)

  String.length "12345";;
  (* : int = 5 *)

  int_of_string "12345";;
  (* : int = 12345 *)

  string_of_int 12345;;
  (* : string = "12345" *)

  String.get "abcdef" 1;;
  (* : char = 'b' *)
#+END_SRC

** W1 S2 :: Expressions

*** Conditional Expressions

- =if ... then ... else ...=
- Is an /expression/, not an instruction!
- *An expression must always have a type*
- Type is the type of the expression in =then= and =else=, which must be the same
- Default value in case of missing =else= : not what you might expect! (See week 5)

*** Playground

#+BEGIN_SRC ocaml
  f 1<2 then 6+7 else 67/23;;
  (* : int = 13 *)

  if 6=8 then 1 else 77.5;;
  (* Error: This expression has type float but and expression was expected of type int *)

  (if 6=3+3 then 3<4 else 8>7) && 67.8 > 33.1;;
  (* : bool = true *)

  if (if 1=1 then 2=2 else 4.0 > 3.2) then 2<3 else 3>2;;
#+END_SRC

*** Function Application

- The type of a function with =n= arguments is like this:
  =type-argument1 -> type-argumentN -> type-result=
- To apply function =f= to =n= arguments: 
  =f expression1 ... expression n=
- Example:
  Type: =String.get : string -> int -> char=
  Application: =String.get "abcd" 2=
- Use parentheses to indicate structure

*** Expression Pitfalls

- local definitions can be used to cut large expressions into pieces (see next sequence)
- functions may be under-supplied with arguments (see Week 4)
- =f(e1,e2)= is /not/ an application of =f= to 2 arguments (see Week 2)

*Note:* The operator for checking equality of values is =\==

*** Polymorphic Operators

- Operators have an infix syntax, like (3 + 5) * 5
- Operators, like functions, always have a type
- Some have a /polymorphic type/: 
  => :  'a -> 'a -> bool=
- Polymorphic types contain *Type Variables*, indicated by an initial quote
- =\'a= reads /alpha/, =\'b= reads /beta/, etc.
- Type variables can be instantiated by any time.

** W1 S3 :: Definitions

*** Global Definitions

- Give names to values
- global: effective for the rest of the toplevel session
- syntax: =let /name/ = expression=
- there is no separate declaration of identifiers
- once set, the value of an identifier never changes
- once defined, an identifier can be used in an expression

*** Local Definitions

- Naming with a delimited scope
- Syntax: =let /name/ = /exp1/ in /exp2/=
- Here, the /scope/ of /name/ is /exp2/
- A local definition may temporarily hide a more global one

*** Playground

#+BEGIN_SRC ocaml
  let x = 4+5 in 2*x;;
  (* : int = 18 *)

  x;;
  (* Error: Unbound value x *)

  let x = 17;;
  x;;
  (* : int = 17 *)

  let y = x+1 in y/3;;
  (* : int = 6 *)

  let x = 4 in
  let y = x+1 in
  let x = 2*y in x;;
  (* : int = 10 *)

  let x = 4 in
      (let x = 17 in x+1) + x;;
  (* : int = 22 *)
#+END_SRC

*** Simultaneous Definitions

- =let x = e=
- =e= is evaluated w.r.t the value bindings before the let
- let x1 = e1 and x2 = e2:
  both expressions are evaluated w.r.t the value bindings before the let
- Same effect as let x2 = e2 and x1 = e1

#+BEGIN_SRC ocaml
  let x = 1;;

  (* sequential definitions *)
  let x = 2 in
      let y = x + 1 in 
      x * y;;
  (* : int = 6 *)

  (* simultaneous definition *)
  let x = 2
  and y = x + 1 in
      x * y;;
  (* : int = 2 *)
#+END_SRC

** W1 S4 :: Functions

*** Defining Functions

- Global definition of a function with one argument:
  =let f x = exp=
- Local definition of a function with one argument:
  =let f x = /exp1/ in /exp2/=
- Scoping rules as before (sequence 3): local definitions hide more global ones
- Application of function named =f= to expression =e: f e=
- Parentheses indicate structure of expressions

** W1 S5 :: Recursion

*** Recursive Functions

- Functions that are defined by calling itself on smaller arguments
- Natural on recursively defined data structores (see Week 3)
  
  Pseudocode for recursive factorial:

  #+BEGIN_SRC 
  fact(n) =  { 1               if n = 1
               n * fact(n - 1) if n > 0 }
  #+END_SRC

*** Recursive Definitions in OCaml

- A priority, the use of =f= in a definition of =f= refers to the /previous/ value of =f=
- The key word =rec= changes this, and allows you to define a function by recursion

  #+BEGIN_SRC ocaml
    let x = 1;;
    (* val x : int = 1 *)

    let x = x+1;;
    (* val x : int = 2 *)

    x;;
    (* : int = 2 *)

    let f x = x+1;;
    (* val f = int -> int = <fun> *)

    let f x = f (f x);;
    (* val f = int -> int = <fun> *)

    f 1;;
    (* : int = 3 *)

    let fact n = if n <= 1 then 1 else n*fact(n-1);;
    (* Error: Unbound value fact *)

    let rec fact n = if n<= 1 then 1 else n*fact(n-1);;
    (* val fact = int -> int = <fun> *)

    fact 10;;
    (* 3628800 *)
  #+END_SRC

*** Mutually Recursive Functions /(??)/

- Generalization of direct recursion
- Several functions are defined by calling each other on smaller arguments
- Natural on mutual recursive data structures
- Example:
  - =n= is even if =n = 0=, or =n > 0= and =n - 1= is odd
  - =n= is odd if =n = 1=, or =n > 1= and =n - 1= is even
    
    ^ This example seems very strange to me. It feels like the first time I saw recursion all over again.

#+BEGIN_SRC ocaml
  let rec even x = if x=0 then true else odd(x-1);;
  (* Error: Unbound value odd *)

  (* Simultanous Definition with keyword AND *)
  let rec even x = if x=0 then true else odd(x-1)
  and odd x = if x=1 then true else even(x-1);;
  (* val even : int -> bool = <fun> *)
  (* val odd  : int -> bool = <fun> *)

  even 17;;

  even 10;;
#+END_SRC

